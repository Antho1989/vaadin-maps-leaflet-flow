name: Release CI

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Get original release version
      id: orig
      run: |
        echo "::set-output name=version::$(echo ${{github.event.client_payload.value}} | cut -dv -f2)"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: |
          ## Installation
          Add the following lines to your pom:
          ```XML
          <dependency>
             <groupId>com.xdev-software</groupId>
             <artifactId>vaadin-maps-leaflet-flow</artifactId>
             <version>${{ steps.orig.outputs.version }}}</version>
          </dependency>
          ```
        draft: false
        prerelease: false

    - name: Save Release Asset Upload URL to File
      shell: bash
      run: |
        echo '${{ steps.create_release.outputs.upload_url }}' > release_asset_upload_url.txt

    - name: Upload Release Asset Upload URL
      uses: actions/upload-artifact@v2
      with:
        name: release_asset_upload_url
        path: release_asset_upload_url.txt

  publish_central: # Publish the code to central
    runs-on: ubuntu-latest
    needs: [create_release]
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 1.8 Apache Maven Central
      uses: actions/setup-java@v1
      with: # running setup-java again overwrites the settings.xml
        java-version: 1.8
        server-id: ossrh
        server-username: MAVEN_CENTRAL_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}

    - name: Publish to Apache Maven Central
      run: mvn deploy -Possrh
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      working-directory: vaadin-maps-leaflet-flow
  
  build_directory: # Build a ZIP that can be uploaded to Vaadin Directory
    runs-on: ubuntu-latest
    needs: [create_release]
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
      
    - name: Build for Vaadin Directory
      run: mvn -B install -Pdirectory
      working-directory: vaadin-maps-leaflet-flow
      
    - name: Upload asset
      uses: actions/upload-artifact@v2
      with:
        name: vaadin-directory-files
        path: vaadin-maps-leaflet-flow/target/vaadin-maps-leaflet-flow-*.zip
        if-no-files-found: error

    - name: Download Release Asset Upload URL
      uses: actions/download-artifact@v2
      with:
        name: release_asset_upload_url
        path: temp_artf/release_asset_upload_url

    - name: Fake steps.create_release.outputs.upload_url from predecessor
      id: create_release
      run: echo "::set-output name=upload_url::$(cat temp_artf/release_asset_upload_url/release_asset_upload_url.txt)"

    - name: Get version
      id: version
      run: |
       echo "::set-output name=release::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
      working-directory: vaadin-maps-leaflet-flow

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: vaadin-maps-leaflet-flow/target/vaadin-maps-leaflet-flow-${{ steps.version.outputs.release }}.zip
        asset_name: vaadin-maps-leaflet-flow-${{ steps.version.outputs.release }}.zip
        asset_content_type: application/zip
